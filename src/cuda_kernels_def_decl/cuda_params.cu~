
// This file is part of the GPU development for HemeLB
// 7-1-2019

#include <stdio.h>

#ifdef HEMELB_USE_GPU
#include "cuda_kernels_def_decl/cuda_params.h"
//#include <thrust/host_vector.h>
//#include <thrust/device_vector.h>
//#include <thrust/copy.h>
//#include <thrust/fill.h>
#endif


namespace hemelb
{

#ifdef HEMELB_USE_GPU
	
	__constant__ unsigned int _NUMVECTORS;

	__constant__ int _InvDirections_19[19];
	
	__constant__ double _EQMWEIGHTS_19[19];
	
	__constant__ int _CX_19[19];
	__constant__ int _CY_19[19];
	__constant__ int _CZ_19[19];


	

/*		
	//-----------------------------------------------------------------------------------------------------------------
	// Include the info for the kernels set-up				
	// Kernel related parameters	   
	// int nThreadsPerBlock_Collide = 32;				//Number of threads per block for the Collision step

	// dim3 nThreads_Collide(nThreadsPerBlock_Collide);

	//-----------------------------------------------------------------------------------------------------------------
	// GPU global kernel functions here
	
	//========================================================
	// Kernel for the Collision step 
	// for the Lattice Boltzmann algorithm 
	// Collision Type 1: Mid Domain - All neighbours are Fluid nodes
	//========================================================
	// __global__ void GPU_Collide_1(double* GMem_dbl, unsigned int nArr_dbl, double* GMem_dbl_conc, unsigned int* GMem_sgl, unsigned int nArr_sgl, long* index_fluid_nodes, long lower_limit, long upper_limit)

	__global__ void GPU_Collide_1(long lower_limit, long upper_limit)
	{

		long Ind = blockIdx.x * blockDim.x + threadIdx.x;	
		Ind =Ind + lower_limit;

		printf("GPU kernel Index = %d ", Ind );		

		if(Ind >= upper_limit)
			return;

		

		//__syncthreads();

	} // Ends the kernel GPU_Collide

	*/

	/*
	//GPU_Collide_testing
	__global__ void GPU_Collide_testing(long lower_limit, long upper_limit)
	{
		long Ind = blockIdx.x * blockDim.x + threadIdx.x;	
		Ind =Ind + lower_limit;

		printf("From Testing GPU kernel Index = %d \n\n", Ind );					

		if(Ind >= upper_limit)
			return;
		
		//__syncthreads();

	} // Ends the kernel GPU_Collide		
	*/

	//========================================================
	// Kernel for the Collision step 
	// for the Lattice Boltzmann algorithm 
	// Collision Type 1: Mid Domain - All neighbours are Fluid nodes
	// Implementation currently follows the memory arrangement of the data 
	// by index LB, i.e. method (b)
	//========================================================
	__global__ void GPU_Collide_1_PreSend(double* GMem_dbl_fOld, unsigned int nArr_dbl, long lower_limit, long upper_limit)
	{
		long Ind = blockIdx.x * blockDim.x + threadIdx.x;	
		Ind =Ind + lower_limit;					
		
		// printf("Lower Limit = %d \n\n", lower_limit);		
		// printf("Upper Limit = %d \n\n", upper_limit);

		if(Ind >= upper_limit)
			return;
		
		/*
		// All information below has been successfully passed to GPU memory 
		printf("GPU kernel Index = %d \n\n", Ind );
		printf("Number of vectors = %d \n\n", _NUMVECTORS);	
	
		printf("Info for Inv Directions... \n\n");	
		for (int i=0; i<19; i++){
			printf("Inv_Direction[%d] = %d \n\n", i, _InvDirections_19[i]);	
		}				
		printf("Info for Eqm Weights... \n\n");	
		for (int i=0; i<19; i++){
			printf("_EQMWEIGHTS_19[%d] = %.5f \n\n", i, _EQMWEIGHTS_19[i]);	
		}
		*/
	
		if(Ind == lower_limit){
			printf("Info for Discrete Velocities CX... \n\n");	
			for (int i=0; i < _NUMVECTORS; i++){
				printf("CX[%d] = %d \n\n", i, _CX_19[i]);	
			}				
		}


		// Load the distribution functions		
		//f[19] and fEq[19]
		double dev_ff[19];
		double nn = 0.0;	// density 
		double ux, uy, uz;	// Velocity 

		// __syncthreads(); // Check!
	
		for(int i=0; i< _NUMVECTORS; i++){
			dev_ff[i] = GMem_dbl_fOld[(unsigned long long)i * nArr_dbl + Ind];
			//nn += dev_ff[i];
		}

		__syncthreads(); // Check if this is needed or maybe I can have the density calculation within the loop 
		

		// Calculate the nessessary elements for calculating the equilibrium distribution functions
		// a. Calculate density
		for(int i=0; i< _NUMVECTORS; i++){			
			nn += dev_ff[i];
		}

		printf("Density[%d] = %.5f \n\n", Ind, nn);	
	
				
		// __syncthreads(); // Check!

		

		// Calculate the nessessary elements for calculating the equilibrium distribution functions
		// a. Calculate density

		// b. Calculate momentum	

		// c. Calculate equilibrium distr. functions



		// Do Collision 




		// Streaming Step
		// Load the streaming indices
		
		
		
		__syncthreads();

	} // Ends the kernel GPU_Collide


#endif
}